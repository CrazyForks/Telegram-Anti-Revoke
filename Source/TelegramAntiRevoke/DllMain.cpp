/*
	该文件内容由 AheadLib 自动生成，仅对其做了少量修改。
	用于将原导出函数转发回被劫持的系统DLL。

	The contents of this file are automatically generated by AheadLib and have only been slightly modified.
	Used to forward the original exported function back to the hijacked system DLL.
*/



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 头文件
#include "Header.h"
#include "Global.h"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// implemented in RealMain.cpp
BOOL WINAPI RealDllMain(HINSTANCE hModule, DWORD dwReason, LPVOID pReserved);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
#pragma comment(linker, "/EXPORT:AvCreateTaskIndex=_AheadLib_AvCreateTaskIndex,@1")
#pragma comment(linker, "/EXPORT:AvQuerySystemResponsiveness=_AheadLib_AvQuerySystemResponsiveness,@2")
#pragma comment(linker, "/EXPORT:AvQueryTaskIndexValue=_AheadLib_AvQueryTaskIndexValue,@3")
#pragma comment(linker, "/EXPORT:AvRevertMmThreadCharacteristics=_AheadLib_AvRevertMmThreadCharacteristics,@4")
#pragma comment(linker, "/EXPORT:AvRtCreateThreadOrderingGroup=_AheadLib_AvRtCreateThreadOrderingGroup,@5")
#pragma comment(linker, "/EXPORT:AvRtCreateThreadOrderingGroupExA=_AheadLib_AvRtCreateThreadOrderingGroupExA,@6")
#pragma comment(linker, "/EXPORT:AvRtCreateThreadOrderingGroupExW=_AheadLib_AvRtCreateThreadOrderingGroupExW,@7")
#pragma comment(linker, "/EXPORT:AvRtDeleteThreadOrderingGroup=_AheadLib_AvRtDeleteThreadOrderingGroup,@8")
#pragma comment(linker, "/EXPORT:AvRtJoinThreadOrderingGroup=_AheadLib_AvRtJoinThreadOrderingGroup,@9")
#pragma comment(linker, "/EXPORT:AvRtLeaveThreadOrderingGroup=_AheadLib_AvRtLeaveThreadOrderingGroup,@10")
#pragma comment(linker, "/EXPORT:AvRtWaitOnThreadOrderingGroup=_AheadLib_AvRtWaitOnThreadOrderingGroup,@11")
#pragma comment(linker, "/EXPORT:AvSetMmMaxThreadCharacteristicsA=_AheadLib_AvSetMmMaxThreadCharacteristicsA,@12")
#pragma comment(linker, "/EXPORT:AvSetMmMaxThreadCharacteristicsW=_AheadLib_AvSetMmMaxThreadCharacteristicsW,@13")
#pragma comment(linker, "/EXPORT:AvSetMmThreadCharacteristicsA=_AheadLib_AvSetMmThreadCharacteristicsA,@14")
#pragma comment(linker, "/EXPORT:AvSetMmThreadCharacteristicsW=_AheadLib_AvSetMmThreadCharacteristicsW,@15")
#pragma comment(linker, "/EXPORT:AvSetMmThreadPriority=_AheadLib_AvSetMmThreadPriority,@16")
#pragma comment(linker, "/EXPORT:AvSetMultimediaMode=_AheadLib_AvSetMultimediaMode,@17")
#pragma comment(linker, "/EXPORT:AvTaskIndexYield=_AheadLib_AvTaskIndexYield,@18")
#pragma comment(linker, "/EXPORT:AvTaskIndexYieldCancel=_AheadLib_AvTaskIndexYieldCancel,@19")
#pragma comment(linker, "/EXPORT:AvThreadOpenTaskIndex=_AheadLib_AvThreadOpenTaskIndex,@20")
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 原函数地址指针
PVOID pfnAvCreateTaskIndex = NULL;
PVOID pfnAvQuerySystemResponsiveness = NULL;
PVOID pfnAvQueryTaskIndexValue = NULL;
PVOID pfnAvRevertMmThreadCharacteristics = NULL;
PVOID pfnAvRtCreateThreadOrderingGroup = NULL;
PVOID pfnAvRtCreateThreadOrderingGroupExA = NULL;
PVOID pfnAvRtCreateThreadOrderingGroupExW = NULL;
PVOID pfnAvRtDeleteThreadOrderingGroup = NULL;
PVOID pfnAvRtJoinThreadOrderingGroup = NULL;
PVOID pfnAvRtLeaveThreadOrderingGroup = NULL;
PVOID pfnAvRtWaitOnThreadOrderingGroup = NULL;
PVOID pfnAvSetMmMaxThreadCharacteristicsA = NULL;
PVOID pfnAvSetMmMaxThreadCharacteristicsW = NULL;
PVOID pfnAvSetMmThreadCharacteristicsA = NULL;
PVOID pfnAvSetMmThreadCharacteristicsW = NULL;
PVOID pfnAvSetMmThreadPriority = NULL;
PVOID pfnAvSetMultimediaMode = NULL;
PVOID pfnAvTaskIndexYield = NULL;
PVOID pfnAvTaskIndexYieldCancel = NULL;
PVOID pfnAvThreadOpenTaskIndex = NULL;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 宏定义
#define EXTERNC extern "C"
#define NAKED __declspec(naked)
#define EXPORT __declspec(dllexport)

#define ALCPP EXPORT NAKED
#define ALSTD EXTERNC EXPORT NAKED void __stdcall
#define ALCFAST EXTERNC EXPORT NAKED void __fastcall
#define ALCDECL EXTERNC NAKED void __cdecl

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AheadLib 命名空间
namespace AheadLib
{
	HMODULE hModule = NULL;

	FARPROC GetAddress(const CHAR *ProcName)
	{
		FARPROC Address = GetProcAddress(hModule, ProcName);
		if (Address == NULL) {
			g::Logger.TraceError("Could not find [" + string(ProcName) + "] function.");
			FORCE_EXIT();
			return NULL;
		}

		return Address;
	}

	void InitializeAddresses()
	{
#define IF_NULL_SET(v, c)	{ if (v == NULL) { v = c; } }

		IF_NULL_SET(pfnAvCreateTaskIndex, GetAddress("AvCreateTaskIndex"));
		IF_NULL_SET(pfnAvQuerySystemResponsiveness, GetAddress("AvQuerySystemResponsiveness"));
		IF_NULL_SET(pfnAvQueryTaskIndexValue, GetAddress("AvQueryTaskIndexValue"));
		IF_NULL_SET(pfnAvRevertMmThreadCharacteristics, GetAddress("AvRevertMmThreadCharacteristics"));
		IF_NULL_SET(pfnAvRtCreateThreadOrderingGroup, GetAddress("AvRtCreateThreadOrderingGroup"));
		IF_NULL_SET(pfnAvRtCreateThreadOrderingGroupExA, GetAddress("AvRtCreateThreadOrderingGroupExA"));
		IF_NULL_SET(pfnAvRtCreateThreadOrderingGroupExW, GetAddress("AvRtCreateThreadOrderingGroupExW"));
		IF_NULL_SET(pfnAvRtDeleteThreadOrderingGroup, GetAddress("AvRtDeleteThreadOrderingGroup"));
		IF_NULL_SET(pfnAvRtJoinThreadOrderingGroup, GetAddress("AvRtJoinThreadOrderingGroup"));
		IF_NULL_SET(pfnAvRtLeaveThreadOrderingGroup, GetAddress("AvRtLeaveThreadOrderingGroup"));
		IF_NULL_SET(pfnAvRtWaitOnThreadOrderingGroup, GetAddress("AvRtWaitOnThreadOrderingGroup"));
		IF_NULL_SET(pfnAvSetMmMaxThreadCharacteristicsA, GetAddress("AvSetMmMaxThreadCharacteristicsA"));
		IF_NULL_SET(pfnAvSetMmMaxThreadCharacteristicsW, GetAddress("AvSetMmMaxThreadCharacteristicsW"));
		IF_NULL_SET(pfnAvSetMmThreadCharacteristicsA, GetAddress("AvSetMmThreadCharacteristicsA"));
		IF_NULL_SET(pfnAvSetMmThreadCharacteristicsW, GetAddress("AvSetMmThreadCharacteristicsW"));
		IF_NULL_SET(pfnAvSetMmThreadPriority, GetAddress("AvSetMmThreadPriority"));
		IF_NULL_SET(pfnAvSetMultimediaMode, GetAddress("AvSetMultimediaMode"));
		IF_NULL_SET(pfnAvTaskIndexYield, GetAddress("AvTaskIndexYield"));
		IF_NULL_SET(pfnAvTaskIndexYieldCancel, GetAddress("AvTaskIndexYieldCancel"));
		IF_NULL_SET(pfnAvThreadOpenTaskIndex, GetAddress("AvThreadOpenTaskIndex"));

#undef IF_NULL_SET
	}

	// 加载原始模块
	void Load()
	{
		if (hModule == NULL)
		{
			CHAR SystemPath[MAX_PATH];

			GetSystemDirectoryA(SystemPath, MAX_PATH);
			hModule = LoadLibraryA((string(SystemPath) + "\\avrt.dll").c_str());
			if (hModule == NULL) {
				g::Logger.TraceError("Unable to load the original module.");
				FORCE_EXIT();
				return;
			}
		}

		InitializeAddresses();
	}

	// 释放原始模块
	void Free()
	{
		if (hModule) {
			FreeLibrary(hModule);
		}
	}
}
using namespace AheadLib;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 入口函数
BOOL WINAPI DllMain(HMODULE hModule, DWORD dwReason, PVOID pvReserved)
{
	if (dwReason == DLL_PROCESS_ATTACH)
	{
		return RealDllMain(hModule, dwReason, pvReserved);
	}
	else if (dwReason == DLL_PROCESS_DETACH)
	{
		Free();
	}

	return TRUE;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AvCreateTaskIndex(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAvCreateTaskIndex
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AvQuerySystemResponsiveness(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAvQuerySystemResponsiveness
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AvQueryTaskIndexValue(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAvQueryTaskIndexValue
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AvRevertMmThreadCharacteristics(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAvRevertMmThreadCharacteristics
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AvRtCreateThreadOrderingGroup(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAvRtCreateThreadOrderingGroup
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AvRtCreateThreadOrderingGroupExA(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAvRtCreateThreadOrderingGroupExA
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AvRtCreateThreadOrderingGroupExW(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAvRtCreateThreadOrderingGroupExW
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AvRtDeleteThreadOrderingGroup(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAvRtDeleteThreadOrderingGroup
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AvRtJoinThreadOrderingGroup(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAvRtJoinThreadOrderingGroup
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AvRtLeaveThreadOrderingGroup(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAvRtLeaveThreadOrderingGroup
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AvRtWaitOnThreadOrderingGroup(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAvRtWaitOnThreadOrderingGroup
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AvSetMmMaxThreadCharacteristicsA(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAvSetMmMaxThreadCharacteristicsA
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AvSetMmMaxThreadCharacteristicsW(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAvSetMmMaxThreadCharacteristicsW
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AvSetMmThreadCharacteristicsA(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAvSetMmThreadCharacteristicsA
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AvSetMmThreadCharacteristicsW(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAvSetMmThreadCharacteristicsW
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AvSetMmThreadPriority(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAvSetMmThreadPriority
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AvSetMultimediaMode(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAvSetMultimediaMode
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AvTaskIndexYield(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAvTaskIndexYield
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AvTaskIndexYieldCancel(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAvTaskIndexYieldCancel
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AvThreadOpenTaskIndex(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAvThreadOpenTaskIndex
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
