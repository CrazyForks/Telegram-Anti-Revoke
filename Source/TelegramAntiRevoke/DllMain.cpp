/*
	该文件内容由 AheadLib 自动生成，仅对其做了少量修改。
	用于将原导出函数转发回被劫持的系统DLL。

	The contents of this file are automatically generated by AheadLib and have only been slightly modified.
	Used to forward the original exported function back to the hijacked system DLL.
*/



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 头文件
#include "Header.h"
#include "Global.h"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// implemented in RealMain.cpp
BOOL WINAPI RealDllMain(HINSTANCE hModule, DWORD dwReason, LPVOID pReserved);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数

#ifdef OS_WIN10

#pragma comment(linker, "/EXPORT:GetFileVersionInfoA=_AheadLib_GetFileVersionInfoA,@1")
#pragma comment(linker, "/EXPORT:GetFileVersionInfoByHandle=_AheadLib_GetFileVersionInfoByHandle,@2")
#pragma comment(linker, "/EXPORT:GetFileVersionInfoExA=_AheadLib_GetFileVersionInfoExA,@3")
#pragma comment(linker, "/EXPORT:GetFileVersionInfoExW=_AheadLib_GetFileVersionInfoExW,@4")
#pragma comment(linker, "/EXPORT:GetFileVersionInfoSizeA=_AheadLib_GetFileVersionInfoSizeA,@5")
#pragma comment(linker, "/EXPORT:GetFileVersionInfoSizeExA=_AheadLib_GetFileVersionInfoSizeExA,@6")
#pragma comment(linker, "/EXPORT:GetFileVersionInfoSizeExW=_AheadLib_GetFileVersionInfoSizeExW,@7")
#pragma comment(linker, "/EXPORT:GetFileVersionInfoSizeW=_AheadLib_GetFileVersionInfoSizeW,@8")
#pragma comment(linker, "/EXPORT:GetFileVersionInfoW=_AheadLib_GetFileVersionInfoW,@9")
#pragma comment(linker, "/EXPORT:VerFindFileA=_AheadLib_VerFindFileA,@10")
#pragma comment(linker, "/EXPORT:VerFindFileW=_AheadLib_VerFindFileW,@11")
#pragma comment(linker, "/EXPORT:VerInstallFileA=_AheadLib_VerInstallFileA,@12")
#pragma comment(linker, "/EXPORT:VerInstallFileW=_AheadLib_VerInstallFileW,@13")
#pragma comment(linker, "/EXPORT:VerLanguageNameA=_AheadLib_VerLanguageNameA,@14")
#pragma comment(linker, "/EXPORT:VerLanguageNameW=_AheadLib_VerLanguageNameW,@15")
#pragma comment(linker, "/EXPORT:VerQueryValueA=_AheadLib_VerQueryValueA,@16")
#pragma comment(linker, "/EXPORT:VerQueryValueW=_AheadLib_VerQueryValueW,@17")

#elif defined OS_WIN7

#pragma comment(linker, "/EXPORT:GetFileVersionInfoA=_AheadLib_GetFileVersionInfoA,@1")
#pragma comment(linker, "/EXPORT:GetFileVersionInfoByHandle=_AheadLib_GetFileVersionInfoByHandle,@2")
#pragma comment(linker, "/EXPORT:GetFileVersionInfoExW=_AheadLib_GetFileVersionInfoExW,@3")
#pragma comment(linker, "/EXPORT:GetFileVersionInfoSizeA=_AheadLib_GetFileVersionInfoSizeA,@4")
#pragma comment(linker, "/EXPORT:GetFileVersionInfoSizeExW=_AheadLib_GetFileVersionInfoSizeExW,@5")
#pragma comment(linker, "/EXPORT:GetFileVersionInfoSizeW=_AheadLib_GetFileVersionInfoSizeW,@6")
#pragma comment(linker, "/EXPORT:GetFileVersionInfoW=_AheadLib_GetFileVersionInfoW,@7")
#pragma comment(linker, "/EXPORT:VerFindFileA=_AheadLib_VerFindFileA,@8")
#pragma comment(linker, "/EXPORT:VerFindFileW=_AheadLib_VerFindFileW,@9")
#pragma comment(linker, "/EXPORT:VerInstallFileA=_AheadLib_VerInstallFileA,@10")
#pragma comment(linker, "/EXPORT:VerInstallFileW=_AheadLib_VerInstallFileW,@11")
#pragma comment(linker, "/EXPORT:VerLanguageNameA=_AheadLib_VerLanguageNameA,@12")
#pragma comment(linker, "/EXPORT:VerLanguageNameW=_AheadLib_VerLanguageNameW,@13")
#pragma comment(linker, "/EXPORT:VerQueryValueA=_AheadLib_VerQueryValueA,@14")
#pragma comment(linker, "/EXPORT:VerQueryValueW=_AheadLib_VerQueryValueW,@15")

#else

static_assert(false, "Project configuration error. You must define OS_WIN10 or OS_WIN7 in Preprocessor Definitions.");

#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 原函数地址指针
PVOID pfnAheadLib_GetFileVersionInfoA = NULL;
PVOID pfnAheadLib_GetFileVersionInfoByHandle = NULL;
PVOID pfnAheadLib_GetFileVersionInfoExW = NULL;
PVOID pfnAheadLib_GetFileVersionInfoSizeA = NULL;
PVOID pfnAheadLib_GetFileVersionInfoSizeExW = NULL;
PVOID pfnAheadLib_GetFileVersionInfoSizeW = NULL;
PVOID pfnAheadLib_GetFileVersionInfoW = NULL;
PVOID pfnAheadLib_VerFindFileA = NULL;
PVOID pfnAheadLib_VerFindFileW = NULL;
PVOID pfnAheadLib_VerInstallFileA = NULL;
PVOID pfnAheadLib_VerInstallFileW = NULL;
PVOID pfnAheadLib_VerLanguageNameA = NULL;
PVOID pfnAheadLib_VerLanguageNameW = NULL;
PVOID pfnAheadLib_VerQueryValueA = NULL;
PVOID pfnAheadLib_VerQueryValueW = NULL;

#ifdef OS_WIN10

// These two routines are not exported in Version.dll of Windows7.
PVOID pfnAheadLib_GetFileVersionInfoExA = NULL;
PVOID pfnAheadLib_GetFileVersionInfoSizeExA = NULL;

#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AheadLib 命名空间
namespace AheadLib
{
	HMODULE hModule = NULL;

	FARPROC GetAddress(const CHAR *ProcName)
	{
		FARPROC Address = GetProcAddress(hModule, ProcName);
		if (Address == NULL) {
			g::Logger.TraceError("Could not find [" + string(ProcName) + "] function.");
			FORCE_EXIT();
			return NULL;
		}

		return Address;
	}

	void InitializeAddresses()
	{
#define IF_NULL_SET(v, c)	{ if (v == NULL) { v = c; } }

		IF_NULL_SET(pfnAheadLib_GetFileVersionInfoA, GetAddress("GetFileVersionInfoA"));
		IF_NULL_SET(pfnAheadLib_GetFileVersionInfoByHandle, GetAddress("GetFileVersionInfoByHandle"));
		IF_NULL_SET(pfnAheadLib_GetFileVersionInfoExW, GetAddress("GetFileVersionInfoExW"));
		IF_NULL_SET(pfnAheadLib_GetFileVersionInfoSizeA, GetAddress("GetFileVersionInfoSizeA"));
		IF_NULL_SET(pfnAheadLib_GetFileVersionInfoSizeExW, GetAddress("GetFileVersionInfoSizeExW"));
		IF_NULL_SET(pfnAheadLib_GetFileVersionInfoSizeW, GetAddress("GetFileVersionInfoSizeW"));
		IF_NULL_SET(pfnAheadLib_GetFileVersionInfoW, GetAddress("GetFileVersionInfoW"));
		IF_NULL_SET(pfnAheadLib_VerFindFileA, GetAddress("VerFindFileA"));
		IF_NULL_SET(pfnAheadLib_VerFindFileW, GetAddress("VerFindFileW"));
		IF_NULL_SET(pfnAheadLib_VerInstallFileA, GetAddress("VerInstallFileA"));
		IF_NULL_SET(pfnAheadLib_VerInstallFileW, GetAddress("VerInstallFileW"));
		IF_NULL_SET(pfnAheadLib_VerLanguageNameA, GetAddress("VerLanguageNameA"));
		IF_NULL_SET(pfnAheadLib_VerLanguageNameW, GetAddress("VerLanguageNameW"));
		IF_NULL_SET(pfnAheadLib_VerQueryValueA, GetAddress("VerQueryValueA"));
		IF_NULL_SET(pfnAheadLib_VerQueryValueW, GetAddress("VerQueryValueW"));

#ifdef OS_WIN10

		IF_NULL_SET(pfnAheadLib_GetFileVersionInfoExA, GetAddress("GetFileVersionInfoExA"));
		IF_NULL_SET(pfnAheadLib_GetFileVersionInfoSizeExA, GetAddress("GetFileVersionInfoSizeExA"));

#endif

#undef IF_NULL_SET
	}

	// 加载原始模块
	void Load()
	{
		if (hModule == NULL)
		{
			CHAR SystemPath[MAX_PATH];

			GetSystemDirectoryA(SystemPath, MAX_PATH);
			hModule = LoadLibraryA((string(SystemPath) + "\\version.dll").c_str());
			if (hModule == NULL) {
				g::Logger.TraceError("Unable to load the original module.");
				FORCE_EXIT();
				return;
			}
		}

		InitializeAddresses();
	}

	// 释放原始模块
	void Free()
	{
		if (hModule) {
			FreeLibrary(hModule);
		}
	}
}
using namespace AheadLib;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 入口函数
BOOL WINAPI DllMain(HMODULE hModule, DWORD dwReason, PVOID pvReserved)
{
	if (dwReason == DLL_PROCESS_ATTACH)
	{
		return RealDllMain(hModule, dwReason, pvReserved);
	}
	else if (dwReason == DLL_PROCESS_DETACH)
	{
		Free();
	}

	return TRUE;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



EXTERN_C __declspec(naked) void __cdecl AheadLib_GetFileVersionInfoA(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAheadLib_GetFileVersionInfoA
	}
}

EXTERN_C __declspec(naked) void __cdecl AheadLib_GetFileVersionInfoByHandle(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAheadLib_GetFileVersionInfoByHandle
	}
}

EXTERN_C __declspec(naked) void __cdecl AheadLib_GetFileVersionInfoExW(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAheadLib_GetFileVersionInfoExW
	}
}

EXTERN_C __declspec(naked) void __cdecl AheadLib_GetFileVersionInfoSizeA(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAheadLib_GetFileVersionInfoSizeA
	}
}

EXTERN_C __declspec(naked) void __cdecl AheadLib_GetFileVersionInfoSizeExW(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAheadLib_GetFileVersionInfoSizeExW
	}
}

EXTERN_C __declspec(naked) void __cdecl AheadLib_GetFileVersionInfoSizeW(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAheadLib_GetFileVersionInfoSizeW
	}
}

EXTERN_C __declspec(naked) void __cdecl AheadLib_GetFileVersionInfoW(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAheadLib_GetFileVersionInfoW
	}
}

EXTERN_C __declspec(naked) void __cdecl AheadLib_VerFindFileA(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAheadLib_VerFindFileA
	}
}

EXTERN_C __declspec(naked) void __cdecl AheadLib_VerFindFileW(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAheadLib_VerFindFileW
	}
}

EXTERN_C __declspec(naked) void __cdecl AheadLib_VerInstallFileA(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAheadLib_VerInstallFileA
	}
}

EXTERN_C __declspec(naked) void __cdecl AheadLib_VerInstallFileW(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAheadLib_VerInstallFileW
	}
}

EXTERN_C __declspec(naked) void __cdecl AheadLib_VerLanguageNameA(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAheadLib_VerLanguageNameA
	}
}

EXTERN_C __declspec(naked) void __cdecl AheadLib_VerLanguageNameW(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAheadLib_VerLanguageNameW
	}
}

EXTERN_C __declspec(naked) void __cdecl AheadLib_VerQueryValueA(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAheadLib_VerQueryValueA
	}
}

EXTERN_C __declspec(naked) void __cdecl AheadLib_VerQueryValueW(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAheadLib_VerQueryValueW
	}
}

#ifdef OS_WIN10

EXTERN_C __declspec(naked) void __cdecl AheadLib_GetFileVersionInfoExA(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAheadLib_GetFileVersionInfoExA
	}
}

EXTERN_C __declspec(naked) void __cdecl AheadLib_GetFileVersionInfoSizeExA(void)
{
	__asm {
		pushad
		call Load
		popad
		jmp pfnAheadLib_GetFileVersionInfoSizeExA
	}
}

#endif